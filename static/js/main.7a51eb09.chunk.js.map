{"version":3,"sources":["reducers/cart.js","reducers/totalCart.js","reducers/index.js","actions/types.js","store.js","actions/cart.js","components/MenuItem.js","components/MenuList.js","components/CartItem.js","components/Cart.js","App.js","index.js"],"names":["initialState","total","combineReducers","cart","state","action","type","payload","itemIndex","findIndex","item","uid","map","i","qty","filter","cartItem","totalCart","price","t","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","removeFromCart","dispatch","connect","addToCart","className","name","onClick","MenuList","menu","items","uuid","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a51eb09.chunk.js","sourcesContent":["import { ADD_TO_CART, REMOVE_FROM_CART } from '../actions/types';\n\nconst initialState = [];\n\n//Cannot mutate array in reducer \n\nexport default function(state = initialState, action){\n    const { type, payload } = action;\n\n    \n    switch(type){\n        case ADD_TO_CART:\n            const itemIndex = state.findIndex(item => item.item.uid === payload.item.uid);\n            if (itemIndex !== -1) {\n                return state.map((item, i) => ({\n                    ...item,\n                    item: {\n                        ...item.item,\n                        qty: item.item.qty + (itemIndex === i ? 1 : 0),\n                    }\n                }));\n            } else {\n                return [...state, payload];\n            }\n        case REMOVE_FROM_CART:\n                return state.filter(cartItem => cartItem.item.uid !== payload.item.uid);\n        default:\n            return state;\n    }\n}","import { ADD_TO_CART, REMOVE_FROM_CART } from '../actions/types';\n\nconst initialState = {\n    total: 0.0\n};\n\n//Cannot mutate array in reducer \n\nexport default function(state = initialState, action){\n    const { type, payload } = action;\n\n    switch(type){\n        \n        case ADD_TO_CART:\n            return { total: state.total + payload.item.price }\n        case REMOVE_FROM_CART:\n            const t = payload.item.qty * payload.item.price;\n            return { total: state.total - t}\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport cart from './cart';\nimport totalCart from './totalCart';\n\nexport default combineReducers({\n    cart,\n    totalCart\n});","export const ADD_TO_CART = 'ADD_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\n\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n\nconst initialState = {};\n\n// const middleware = [thunk];\n\nconst middleware = process.env.NODE_ENV !== 'production' ?\n  [require('redux-immutable-state-invariant').default(), thunk] :\n  [thunk];\n\nconst store = createStore(\n    rootReducer, \n    initialState, \n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;","import { ADD_TO_CART, REMOVE_FROM_CART } from './types';\n\nexport const addToCart = item => dispatch => {\n    dispatch({\n        type: ADD_TO_CART,\n        payload: {\n            item\n        }\n    });\n}\n\nexport const removeFromCart = item => dispatch => {\n    dispatch({\n        type: REMOVE_FROM_CART,\n        payload: {\n            item \n        }\n    });\n}\n","import React, { Fragment } from 'react';\n\nimport { connect } from 'react-redux';\nimport { addToCart } from '../actions/cart';\n\nconst MenuItem = ({ addToCart, item }) => {\n\n    const handleAddToCart = () => {\n        \n        addToCart(item)\n    }\n\n    return (\n        // <table border=\"1\">\n        //     <thead>\n        //         <tr>\n        //             <th>Name</th>\n        //             <th>price</th>\n        //             <th>cat</th>\n        //             <th>qty</th>\n        //         </tr>\n        //     </thead>\n        //     <tbody>\n        //         <tr onClick={handleAddToCart}>\n        //             <td>{item.name}</td>\n        //             <td>{item.price}</td>\n        //             <td>{item.category}</td>\n        //             <td>{item.qty}</td>\n        //         </tr>\n        //     </tbody>\n        // </table>\n        <Fragment>\n            <div className=\"menu-item\">\n                <div className=\"menu-item-specs\">\n                    <h3 className=\"menu-item-name\">{item.name}</h3>\n                    <span className=\"menu-dots\"></span>\n                    <h3 className=\"menu-item-price\"><span>$</span>{item.price}</h3>\n                </div>\n                <p className=\"menu-item-desc\">This is a demo item</p>\n                <button onClick={handleAddToCart} className=\"menu-item-order button\">Add to cart</button>\n            </div>\n        </Fragment>\n\n\n\n        \n    )\n}\n\nexport default connect(\n    null,\n    { addToCart }\n)(MenuItem);","import React, { useEffect } from 'react';\nimport uuid from 'react-uuid';\n\nimport MenuItem from './MenuItem';\n\nconst MenuList = () => {\n\n    const menu = {\n        items: [\n            {\n                \"name\": \"Coke\",\n                \"price\": 3,\n                \"category\": \"drink\",\n                \"qty\": 1, \n                \"uid\": uuid()\n            },\n            {\n                \"name\": \"Hamburger\",\n                \"price\": 12,\n                \"category\": \"dinner\",\n                \"qty\": 1,\n                \"uid\": uuid()\n            },\n            {\n                \"name\": \"Ice tea\",\n                \"price\": 3,\n                \"category\": \"drink\",\n                \"qty\": 1, \n                \"uid\": uuid()\n            },\n            {\n                \"name\": \"Hot Dog\",\n                \"price\": 8,\n                \"category\": \"dinner\",\n                \"qty\": 1,\n                \"uid\": uuid()\n            },\n            {\n                \"name\": \"Fries\",\n                \"price\": 6,\n                \"category\": \"drink\",\n                \"qty\": 1, \n                \"uid\": uuid()\n            },\n            {\n                \"name\": \"Beer\",\n                \"price\": 12,\n                \"category\": \"dinner\",\n                \"qty\": 1,\n                \"uid\": uuid()\n            }\n        ]\n    };\n\n    return (\n        <div className=\"menu-container\">\n            <h1>Menu</h1>\n            <p>**Add items to cart and see the cart update**</p>\n            {menu.items.map(item => (\n                <MenuItem item={item} key={item.uid}/>\n            ))}\n        </div>\n    )\n}\nexport default MenuList;\n","import React from 'react'\n\nimport { removeFromCart } from '../actions/cart';\nimport { connect } from 'react-redux';\n\n\nconst CartItem = ({ cartItem, removeFromCart }) => {\n    \n    const handleRemoveClick = () => {\n        removeFromCart(cartItem);\n    }\n\n    return (\n        <div className=\"cart-item-container\">\n            <div className=\"cart-first\">\n                <span className=\"cart-item-name\">{cartItem.name}</span>\n                <button className=\"remove-btn\" onClick={handleRemoveClick}>X</button>\n            </div>\n            <div className=\"cart-sec\">\n                <span className=\"cart-item-price\">Price: ${cartItem.price}</span>\n                <span className=\"cart-item-qty\">Qty: {cartItem.qty}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default connect(\n    null,\n    { removeFromCart }\n)(CartItem);\n","import React, { Fragment } from 'react';\n\nimport { connect } from 'react-redux';\nimport { removeFromCart } from '../actions/cart';\n\nimport CartItem from './CartItem';\n\nconst Cart = ({ cart, totalCart }) => {\n\n    return (\n        <div className=\"cart-container\">\n           <h1>Cart</h1>\n           {cart.map(cartItem => (\n               <div>\n                   <CartItem cartItem={cartItem.item} key={cartItem.item.uid} />\n               </div>\n           ))}\n            <div className=\"total\">\n                <div>Total:</div>\n                <div>${totalCart.total}</div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    cart: state.cart,\n    totalCart: state.totalCart\n})\n\nexport default connect(\n    mapStateToProps,\n    { removeFromCart }\n)(Cart);","import React from 'react';\n\n//redux \nimport { Provider } from 'react-redux';\nimport store from './store';\nimport MenuList from './components/MenuList';\nimport Cart from './components/Cart';\n\nimport './styles/main.css';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"flex-container\">\n        <MenuList />\n        <Cart />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}